// Описания к объектам читайте ВНИЗУ


// ********* ФУНКЦИИ для работы с "серваком" ********


// функция получения данных по ключу
// если инфы по такому ключу нет, то вернет null
function getFromServer(key) {
	return localStorage.getItem(key);
}


// функция записи данных для НОВОГО ключа
// в случае успешной записи вернет true, иначе false
// а запись будет успешной если на "серваке" НЕ БЫЛО данных по передаваемому ключу
function newToServer(key, value) {
	if (!localStorage.getItem(key)) {
		localStorage.setItem(key, value);
		return true;
	}
	else {return false;}
}


// функция перезаписи данных по существующему ключу
// вернет true в случае успешной записи, иначе false
// а запись будет успешной если на "серваке" есть данные по передаваемому ключу,
// которые можно перезаписать
function overwriteToServer(key, value) {
	if (localStorage.getItem(key)) {
		localStorage.setItem(key, value);
		return true;
	}
	else {return false;}
}


// для очистки всего localStorage. (техническая, для тестов)
function clearLocal() {
	localStorage.clear();
}




// *******  ОПИСАНИЕ ОБЪЕКТОВ ********


/*
для работы используйте следующие ключи запросов на "сервак":

Для базы данных всех треков - musicDataBase.
Предпологается, что при отсылке на "сервак" этого ключа вернется JSON-объект следующего содержания

{
	"название исполнителя" : {
			"info" : "Информация для биографии исполнителя.",
			"defaultInfo" : "Извините, но статья по данному исполнителю временно не доступна.",
			"audio" : {
					"название композиции" : {
							"link" : "ссылка на местоположение файла",
							"counter" : "счетчик проигрываний",
					}
			}
	},
};

"название исполнителя" - это название свойства объекта (первый уровень вложенности).
 (ну вместо "название исполнителя" будет реальное название)
 Чем больше в базе треков всевозможных исполнителей, тем больше свойств на этом уровне вложенности
 у получаемого вами объекта.

"название композиции" - это название свойства внутреннего объекта audio (третий уровень вложенности).
 Чем больше в базе треков данного исполнителя, тем больше свойств у объекта audio.

 Всего у получаемого объекта 4 уровня вложенности:
 1) множество внутренних объектов "исполнителей";
 2) в каждом объекте исполнителя свойства info, defaultInfo и внутренний объект audio
 3) в объекте audio множество внутренних объектов "треков данного исполнителя"
 4) в каждом объекте "трека исполнителя" свойства link и counter

В процессе разработки в объекте могут добавиться дополнительные свойства или даже объекты. Если у вас есть надобность в какой-нибудь инфе - говорите.




Для построения плейлиста - playlist
Предпологается, что при отсылке на "сервак" этого ключа вернется JSON-объект следующего содержания

[object[0], object[1], object[2], ...., object[длянна_массива - 1]]

	где object[n] - объекты следующего содержания


{
	performer: "название исполнителя",
	// его можно спользовать как ключ для доступа к данным musicDataBase на 1-м уровне вложенности

	soundName : "название композиции"
	// его можно спользовать как ключ для доступа к данным musicDataBase на 3-м уровне вложенности
}
*/




